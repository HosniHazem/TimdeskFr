{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"showZero\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '../composeClasses';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport useBadge from './useBadge';\nimport { getBadgeUnstyledUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const invisible = ownerState.invisible;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUnstyledUtilityClass, undefined);\n};\n\nconst BadgeUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function BadgeUnstyled(props, ref) {\n  const component = props.component,\n        children = props.children,\n        className = props.className,\n        _props$components = props.components,\n        components = _props$components === void 0 ? {} : _props$components,\n        _props$componentsProp = props.componentsProps,\n        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n        _props$max = props.max,\n        maxProp = _props$max === void 0 ? 99 : _props$max,\n        _props$showZero = props.showZero,\n        showZero = _props$showZero === void 0 ? false : _props$showZero,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const _useBadge = useBadge(_extends({}, props, {\n    max: maxProp\n  })),\n        badgeContent = _useBadge.badgeContent,\n        max = _useBadge.max,\n        displayValue = _useBadge.displayValue,\n        invisible = _useBadge.invisible;\n\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || components.Root || 'span';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  const Badge = components.Badge || 'span';\n  const badgeProps = appendOwnerState(Badge, componentsProps.badge, ownerState);\n  return (\n    /*#__PURE__*/\n    _jsxs(Root, _extends({}, rootProps, {\n      ref: ref\n    }, other, {\n      className: clsx(classes.root, rootProps.className, className),\n      children: [children,\n      /*#__PURE__*/\n      _jsx(Badge, _extends({}, badgeProps, {\n        className: clsx(classes.badge, badgeProps.className),\n        children: displayValue\n      }))]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.object,\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool\n} : void 0;\nexport default BadgeUnstyled;","map":{"version":3,"sources":["C:/Users/HAZEM/Desktop/template/node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","composeClasses","appendOwnerState","useBadge","getBadgeUnstyledUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","invisible","slots","root","badge","undefined","BadgeUnstyled","forwardRef","props","ref","component","children","className","components","componentsProps","max","maxProp","showZero","other","badgeContent","displayValue","classes","Root","rootProps","Badge","badgeProps","process","env","NODE_ENV","propTypes","node","string","elementType","shape","object","bool","number"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"showZero\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '../composeClasses';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport useBadge from './useBadge';\nimport { getBadgeUnstyledUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUnstyledUtilityClass, undefined);\n};\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    component,\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    max: maxProp = 99,\n    showZero = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    max: maxProp\n  }));\n\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || components.Root || 'span';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  const Badge = components.Badge || 'span';\n  const badgeProps = appendOwnerState(Badge, componentsProps.badge, ownerState);\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className),\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      className: clsx(classes.badge, badgeProps.className),\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.object,\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool\n} : void 0;\nexport default BadgeUnstyled;"]},"metadata":{},"sourceType":"module"}