{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"action\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"disabled\", \"focusableWhenDisabled\", \"onBlur\", \"onClick\", \"onFocus\", \"onFocusVisible\", \"onKeyDown\", \"onKeyUp\", \"onMouseLeave\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getButtonUnstyledUtilityClass } from './buttonUnstyledClasses';\nimport useButton from './useButton';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const active = ownerState.active,\n        disabled = ownerState.disabled,\n        focusVisible = ownerState.focusVisible;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, getButtonUnstyledUtilityClass, {});\n};\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Button](https://mui.com/base/react-button/)\n *\n * API:\n *\n * - [ButtonUnstyled API](https://mui.com/base/api/button-unstyled/)\n */\n\n\nconst ButtonUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function ButtonUnstyled(props, forwardedRef) {\n  var _ref, _componentsProps$root;\n\n  const action = props.action,\n        children = props.children,\n        className = props.className,\n        component = props.component,\n        _props$components = props.components,\n        components = _props$components === void 0 ? {} : _props$components,\n        _props$componentsProp = props.componentsProps,\n        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n        _props$focusableWhenD = props.focusableWhenDisabled,\n        focusableWhenDisabled = _props$focusableWhenD === void 0 ? false : _props$focusableWhenD,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const buttonRef = React.useRef();\n  const handleRef = useForkRef(buttonRef, forwardedRef);\n  const ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';\n\n  const _useButton = useButton(_extends({}, props, {\n    component: ButtonRoot,\n    focusableWhenDisabled,\n    ref: handleRef\n  })),\n        active = _useButton.active,\n        focusVisible = _useButton.focusVisible,\n        setFocusVisible = _useButton.setFocusVisible,\n        getRootProps = _useButton.getRootProps;\n\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n\n  const ownerState = _extends({}, props, {\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const buttonRootProps = appendOwnerState(ButtonRoot, _extends({}, getRootProps(), other, componentsProps.root, {\n    className: clsx(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)\n  }), ownerState);\n  return (\n    /*#__PURE__*/\n    _jsx(ButtonRoot, _extends({}, buttonRootProps, {\n      children: children\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the Root slot.\n   * Either a string to use a HTML element or a component.\n   * @default 'button'\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func\n} : void 0;\nexport default ButtonUnstyled;","map":{"version":3,"sources":["C:/Users/HAZEM/Desktop/template/node_modules/@mui/base/ButtonUnstyled/ButtonUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_useForkRef","useForkRef","composeClasses","getButtonUnstyledUtilityClass","useButton","appendOwnerState","jsx","_jsx","useUtilityClasses","ownerState","active","disabled","focusVisible","slots","root","ButtonUnstyled","forwardRef","props","forwardedRef","_ref","_componentsProps$root","action","children","className","component","components","componentsProps","focusableWhenDisabled","other","buttonRef","useRef","handleRef","ButtonRoot","Root","ref","setFocusVisible","getRootProps","useImperativeHandle","current","focus","classes","buttonRootProps","process","env","NODE_ENV","propTypes","oneOfType","func","shape","isRequired","node","string","elementType","object","bool","onFocusVisible"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"action\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"disabled\", \"focusableWhenDisabled\", \"onBlur\", \"onClick\", \"onFocus\", \"onFocusVisible\", \"onKeyDown\", \"onKeyUp\", \"onMouseLeave\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getButtonUnstyledUtilityClass } from './buttonUnstyledClasses';\nimport useButton from './useButton';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    active,\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, getButtonUnstyledUtilityClass, {});\n};\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Button](https://mui.com/base/react-button/)\n *\n * API:\n *\n * - [ButtonUnstyled API](https://mui.com/base/api/button-unstyled/)\n */\n\n\nconst ButtonUnstyled = /*#__PURE__*/React.forwardRef(function ButtonUnstyled(props, forwardedRef) {\n  var _ref, _componentsProps$root;\n\n  const {\n    action,\n    children,\n    className,\n    component,\n    components = {},\n    componentsProps = {},\n    focusableWhenDisabled = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const buttonRef = React.useRef();\n  const handleRef = useForkRef(buttonRef, forwardedRef);\n  const ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';\n  const {\n    active,\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton(_extends({}, props, {\n    component: ButtonRoot,\n    focusableWhenDisabled,\n    ref: handleRef\n  }));\n  React.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n\n  const ownerState = _extends({}, props, {\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const buttonRootProps = appendOwnerState(ButtonRoot, _extends({}, getRootProps(), other, componentsProps.root, {\n    className: clsx(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)\n  }), ownerState);\n  return /*#__PURE__*/_jsx(ButtonRoot, _extends({}, buttonRootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the Root slot.\n   * Either a string to use a HTML element or a component.\n   * @default 'button'\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func\n} : void 0;\nexport default ButtonUnstyled;"]},"metadata":{},"sourceType":"module"}