{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\", \"components\", \"componentsProps\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { appendOwnerState } from '../utils';\nimport composeClasses from '../composeClasses';\nimport { getTabPanelUnstyledUtilityClass } from './tabPanelUnstyledClasses';\nimport useTabPanel from './useTabPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const hidden = ownerState.hidden;\n  const slots = {\n    root: ['root', hidden && 'hidden']\n  };\n  return composeClasses(slots, getTabPanelUnstyledUtilityClass, {});\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base/react-tabs/)\n *\n * API:\n *\n * - [TabPanelUnstyled API](https://mui.com/base/api/tab-panel-unstyled/)\n */\n\n\nconst TabPanelUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function TabPanelUnstyled(props, ref) {\n  var _ref, _componentsProps$root;\n\n  const children = props.children,\n        className = props.className,\n        _props$components = props.components,\n        components = _props$components === void 0 ? {} : _props$components,\n        _props$componentsProp = props.componentsProps,\n        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n        component = props.component,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const _useTabPanel = useTabPanel(props),\n        hidden = _useTabPanel.hidden,\n        getRootProps = _useTabPanel.getRootProps;\n\n  const ownerState = _extends({}, props, {\n    hidden\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const TabPanelRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  const tabPanelRootProps = appendOwnerState(TabPanelRoot, _extends({}, other, componentsProps.root), ownerState);\n  return (\n    /*#__PURE__*/\n    _jsx(TabPanelRoot, _extends({}, getRootProps(), {\n      ref: ref,\n      role: \"tabpanel\"\n    }, tabPanelRootProps, {\n      className: clsx(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),\n      children: !hidden && children\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanelUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the TabPanel.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the TabPanel.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : void 0;\nexport default TabPanelUnstyled;","map":{"version":3,"sources":["C:/Users/HAZEM/Desktop/template/node_modules/@mui/base/TabPanelUnstyled/TabPanelUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","appendOwnerState","composeClasses","getTabPanelUnstyledUtilityClass","useTabPanel","jsx","_jsx","useUtilityClasses","ownerState","hidden","slots","root","TabPanelUnstyled","forwardRef","props","ref","_ref","_componentsProps$root","children","className","components","componentsProps","component","other","getRootProps","classes","TabPanelRoot","Root","tabPanelRootProps","role","process","env","NODE_ENV","propTypes","node","string","elementType","shape","object","value","oneOfType","number","isRequired"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\", \"components\", \"componentsProps\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { appendOwnerState } from '../utils';\nimport composeClasses from '../composeClasses';\nimport { getTabPanelUnstyledUtilityClass } from './tabPanelUnstyledClasses';\nimport useTabPanel from './useTabPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    hidden\n  } = ownerState;\n  const slots = {\n    root: ['root', hidden && 'hidden']\n  };\n  return composeClasses(slots, getTabPanelUnstyledUtilityClass, {});\n};\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base/react-tabs/)\n *\n * API:\n *\n * - [TabPanelUnstyled API](https://mui.com/base/api/tab-panel-unstyled/)\n */\n\n\nconst TabPanelUnstyled = /*#__PURE__*/React.forwardRef(function TabPanelUnstyled(props, ref) {\n  var _ref, _componentsProps$root;\n\n  const {\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    component\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    hidden,\n    getRootProps\n  } = useTabPanel(props);\n\n  const ownerState = _extends({}, props, {\n    hidden\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const TabPanelRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  const tabPanelRootProps = appendOwnerState(TabPanelRoot, _extends({}, other, componentsProps.root), ownerState);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({}, getRootProps(), {\n    ref: ref,\n    role: \"tabpanel\"\n  }, tabPanelRootProps, {\n    className: clsx(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),\n    children: !hidden && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanelUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the TabPanel.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the TabPanel.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : void 0;\nexport default TabPanelUnstyled;"]},"metadata":{},"sourceType":"module"}