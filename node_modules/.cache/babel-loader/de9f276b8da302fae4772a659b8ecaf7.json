{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const _options$theme = options.theme,\n        baseTheme = _options$theme === void 0 ? {} : _options$theme,\n        _options$defaultMode = options.defaultMode,\n        desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n        designSystemColorScheme = options.defaultColorScheme,\n        _options$disableTrans = options.disableTransitionOnChange,\n        designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n        _options$enableColorS = options.enableColorScheme,\n        designSystemEnableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n        _options$prefix = options.prefix,\n        designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n        shouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n        resolveTheme = options.resolveTheme;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext =\n  /*#__PURE__*/\n  React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme\n  }) {\n    const _baseTheme$colorSchem = baseTheme.colorSchemes,\n          baseColorSchemes = _baseTheme$colorSchem === void 0 ? {} : _baseTheme$colorSchem,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const _themeProp$colorSchem = themeProp.colorSchemes,\n          colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        _deepmerge$components = _deepmerge.components,\n        components = _deepmerge$components === void 0 ? {} : _deepmerge$components,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    const _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    }),\n          mode = _useCurrentColorSchem.mode,\n          setMode = _useCurrentColorSchem.setMode,\n          systemMode = _useCurrentColorSchem.systemMode,\n          lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n          darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n          colorScheme = _useCurrentColorSchem.colorScheme,\n          setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const _cssVarsParser = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    }),\n          rootCss = _cssVarsParser.css,\n          rootVars = _cssVarsParser.vars,\n          parsedTheme = _cssVarsParser.parsedTheme;\n\n    mergedTheme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      prefix,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      }),\n            css = _cssVarsParser2.css,\n            vars = _cssVarsParser2.vars,\n            parsedScheme = _cssVarsParser2.parsedTheme;\n\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        mergedTheme = _extends({}, mergedTheme, parsedScheme);\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return (\n      /*#__PURE__*/\n      _jsxs(ColorSchemeContext.Provider, {\n        value: {\n          mode,\n          setMode,\n          lightColorScheme,\n          darkColorScheme,\n          colorScheme,\n          setColorScheme,\n          allColorSchemes\n        },\n        children: [\n        /*#__PURE__*/\n        _jsx(GlobalStyles, {\n          styles: {\n            ':root': rootCss\n          }\n        }),\n        /*#__PURE__*/\n        _jsx(GlobalStyles, {\n          styles: styleSheet\n        }),\n        /*#__PURE__*/\n        _jsx(ThemeProvider, {\n          theme: resolveTheme ? resolveTheme(mergedTheme) : mergedTheme,\n          children: children\n        })]\n      })\n    );\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["C:/Users/HAZEM/Desktop/template/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetCssVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","theme","baseTheme","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","enableColorScheme","designSystemEnableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","resolveTheme","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","basePrefix","rootCss","css","rootVars","vars","parsedTheme","getCssVar","styleSheet","entries","forEach","key","scheme","parsedScheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme\n  }) {\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = baseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      prefix,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        mergedTheme = _extends({}, mergedTheme, parsedScheme);\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(mergedTheme) : mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}