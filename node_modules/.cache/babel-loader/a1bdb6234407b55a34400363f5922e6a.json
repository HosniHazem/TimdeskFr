{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes,\n        indeterminate = ownerState.indeterminate,\n        color = ownerState.color;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const ownerState = props.ownerState;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: theme.palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: theme.palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: theme.palette.action.disabled\n  }\n}));\n\nconst defaultCheckedIcon =\n/*#__PURE__*/\n_jsx(CheckBoxIcon, {});\n\nconst defaultIcon =\n/*#__PURE__*/\n_jsx(CheckBoxOutlineBlankIcon, {});\n\nconst defaultIndeterminateIcon =\n/*#__PURE__*/\n_jsx(IndeterminateCheckBoxIcon, {});\n\nconst Checkbox =\n/*#__PURE__*/\nReact.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n\n  const _props$checkedIcon = props.checkedIcon,\n        checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n        _props$color = props.color,\n        color = _props$color === void 0 ? 'primary' : _props$color,\n        _props$icon = props.icon,\n        iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,\n        _props$indeterminate = props.indeterminate,\n        indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n        _props$indeterminateI = props.indeterminateIcon,\n        indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n        inputProps = props.inputProps,\n        _props$size = props.size,\n        size = _props$size === void 0 ? 'medium' : _props$size,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return (\n    /*#__PURE__*/\n    _jsx(CheckboxRoot, _extends({\n      type: \"checkbox\",\n      inputProps: _extends({\n        'data-indeterminate': indeterminate\n      }, inputProps),\n      icon:\n      /*#__PURE__*/\n      React.cloneElement(icon, {\n        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n      }),\n      checkedIcon:\n      /*#__PURE__*/\n      React.cloneElement(indeterminateIcon, {\n        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n      }),\n      ownerState: ownerState,\n      ref: ref\n    }, other, {\n      classes: classes\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","map":{"version":3,"sources":["C:/Users/HAZEM/Desktop/template/node_modules/@mui/material/Checkbox/Checkbox.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","refType","unstable_composeClasses","composeClasses","alpha","SwitchBase","CheckBoxOutlineBlankIcon","CheckBoxIcon","IndeterminateCheckBoxIcon","capitalize","useThemeProps","styled","rootShouldForwardProp","checkboxClasses","getCheckboxUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","classes","indeterminate","color","slots","root","composedClasses","CheckboxRoot","shouldForwardProp","prop","name","slot","overridesResolver","props","styles","theme","palette","text","secondary","disableRipple","backgroundColor","action","active","main","hoverOpacity","checked","disabled","defaultCheckedIcon","defaultIcon","defaultIndeterminateIcon","Checkbox","forwardRef","inProps","ref","_icon$props$fontSize","_indeterminateIcon$pr","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","size","other","type","cloneElement","fontSize","process","env","NODE_ENV","propTypes","bool","node","object","oneOfType","oneOf","string","defaultChecked","id","inputRef","onChange","func","required","sx","arrayOf","value","any"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,OAAhB,EAAyB,MAAzB,EAAiC,eAAjC,EAAkD,mBAAlD,EAAuE,YAAvE,EAAqF,MAArF,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,uBAAuB,IAAIC,cAApC,QAA0D,WAA1D;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,wBAAP,MAAqC,4CAArC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,yBAAP,MAAsC,6CAAtC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,MAAP,IAAiBC,qBAAjB,QAA8C,kBAA9C;AACA,OAAOC,eAAP,IAA0BC,uBAA1B,QAAyD,mBAAzD;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;AAAA,QAEpCC,OAFoC,GAKlCD,UALkC,CAEpCC,OAFoC;AAAA,QAGpCC,aAHoC,GAKlCF,UALkC,CAGpCE,aAHoC;AAAA,QAIpCC,KAJoC,GAKlCH,UALkC,CAIpCG,KAJoC;AAMtC,QAAMC,KAAK,GAAG;AACZC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAASH,aAAa,IAAI,eAA1B,EAA4C,QAAOX,UAAU,CAACY,KAAD,CAAQ,EAArE;AADM,GAAd;AAGA,QAAMG,eAAe,GAAGrB,cAAc,CAACmB,KAAD,EAAQR,uBAAR,EAAiCK,OAAjC,CAAtC;AACA,SAAOtB,QAAQ,CAAC,EAAD,EAAKsB,OAAL,EAAcK,eAAd,CAAf;AACD,CAXD;;AAaA,MAAMC,YAAY,GAAGd,MAAM,CAACN,UAAD,EAAa;AACtCqB,EAAAA,iBAAiB,EAAEC,IAAI,IAAIf,qBAAqB,CAACe,IAAD,CAArB,IAA+BA,IAAI,KAAK,SAD7B;AAEtCC,EAAAA,IAAI,EAAE,aAFgC;AAGtCC,EAAAA,IAAI,EAAE,MAHgC;AAItCC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAAA,UAElCd,UAFkC,GAGhCa,KAHgC,CAElCb,UAFkC;AAIpC,WAAO,CAACc,MAAM,CAACT,IAAR,EAAcL,UAAU,CAACE,aAAX,IAA4BY,MAAM,CAACZ,aAAjD,EAAgEF,UAAU,CAACG,KAAX,KAAqB,SAArB,IAAkCW,MAAM,CAAE,QAAOvB,UAAU,CAACS,UAAU,CAACG,KAAZ,CAAmB,EAAtC,CAAxG,CAAP;AACD;AATqC,CAAb,CAAN,CAUlB,CAAC;AACFY,EAAAA,KADE;AAEFf,EAAAA;AAFE,CAAD,KAGGrB,QAAQ,CAAC;AACbwB,EAAAA,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmBC;AADb,CAAD,EAEX,CAAClB,UAAU,CAACmB,aAAZ,IAA6B;AAC9B,aAAW;AACTC,IAAAA,eAAe,EAAElC,KAAK,CAACc,UAAU,CAACG,KAAX,KAAqB,SAArB,GAAiCY,KAAK,CAACC,OAAN,CAAcK,MAAd,CAAqBC,MAAtD,GAA+DP,KAAK,CAACC,OAAN,CAAchB,UAAU,CAACG,KAAzB,EAAgCoB,IAAhG,EAAsGR,KAAK,CAACC,OAAN,CAAcK,MAAd,CAAqBG,YAA3H,CADb;AAET;AACA,4BAAwB;AACtBJ,MAAAA,eAAe,EAAE;AADK;AAHf;AADmB,CAFlB,EAUXpB,UAAU,CAACG,KAAX,KAAqB,SAArB,IAAkC;AACnC,GAAE,KAAIR,eAAe,CAAC8B,OAAQ,OAAM9B,eAAe,CAACO,aAAc,EAAlE,GAAsE;AACpEC,IAAAA,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAchB,UAAU,CAACG,KAAzB,EAAgCoB;AAD6B,GADnC;AAInC,GAAE,KAAI5B,eAAe,CAAC+B,QAAS,EAA/B,GAAmC;AACjCvB,IAAAA,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAcK,MAAd,CAAqBK;AADK;AAJA,CAVvB,CAbO,CAArB;;AAgCA,MAAMC,kBAAkB;AAAG;AAAa7B,IAAI,CAACT,YAAD,EAAe,EAAf,CAA5C;;AAEA,MAAMuC,WAAW;AAAG;AAAa9B,IAAI,CAACV,wBAAD,EAA2B,EAA3B,CAArC;;AAEA,MAAMyC,wBAAwB;AAAG;AAAa/B,IAAI,CAACR,yBAAD,EAA4B,EAA5B,CAAlD;;AAEA,MAAMwC,QAAQ;AAAG;AAAajD,KAAK,CAACkD,UAAN,CAAiB,SAASD,QAAT,CAAkBE,OAAlB,EAA2BC,GAA3B,EAAgC;AAC7E,MAAIC,oBAAJ,EAA0BC,qBAA1B;;AAEA,QAAMtB,KAAK,GAAGrB,aAAa,CAAC;AAC1BqB,IAAAA,KAAK,EAAEmB,OADmB;AAE1BtB,IAAAA,IAAI,EAAE;AAFoB,GAAD,CAA3B;;AAH6E,6BAgBzEG,KAhByE,CAS3EuB,WAT2E;AAAA,QAS3EA,WAT2E,mCAS7DT,kBAT6D;AAAA,uBAgBzEd,KAhByE,CAU3EV,KAV2E;AAAA,QAU3EA,KAV2E,6BAUnE,SAVmE;AAAA,sBAgBzEU,KAhByE,CAW3EwB,IAX2E;AAAA,QAWrEC,QAXqE,4BAW1DV,WAX0D;AAAA,+BAgBzEf,KAhByE,CAY3EX,aAZ2E;AAAA,QAY3EA,aAZ2E,qCAY3D,KAZ2D;AAAA,gCAgBzEW,KAhByE,CAa3E0B,iBAb2E;AAAA,QAaxDC,qBAbwD,sCAahCX,wBAbgC;AAAA,QAc3EY,UAd2E,GAgBzE5B,KAhByE,CAc3E4B,UAd2E;AAAA,sBAgBzE5B,KAhByE,CAe3E6B,IAf2E;AAAA,QAe3EA,IAf2E,4BAepE,QAfoE;AAAA,QAiBvEC,KAjBuE,GAiB/DjE,6BAA6B,CAACmC,KAAD,EAAQjC,SAAR,CAjBkC;;AAmB7E,QAAMyD,IAAI,GAAGnC,aAAa,GAAGsC,qBAAH,GAA2BF,QAArD;AACA,QAAMC,iBAAiB,GAAGrC,aAAa,GAAGsC,qBAAH,GAA2BJ,WAAlE;;AAEA,QAAMpC,UAAU,GAAGrB,QAAQ,CAAC,EAAD,EAAKkC,KAAL,EAAY;AACrCV,IAAAA,KADqC;AAErCD,IAAAA,aAFqC;AAGrCwC,IAAAA;AAHqC,GAAZ,CAA3B;;AAMA,QAAMzC,OAAO,GAAGF,iBAAiB,CAACC,UAAD,CAAjC;AACA;AAAO;AAAaF,IAAAA,IAAI,CAACS,YAAD,EAAe5B,QAAQ,CAAC;AAC9CiE,MAAAA,IAAI,EAAE,UADwC;AAE9CH,MAAAA,UAAU,EAAE9D,QAAQ,CAAC;AACnB,8BAAsBuB;AADH,OAAD,EAEjBuC,UAFiB,CAF0B;AAK9CJ,MAAAA,IAAI;AAAE;AAAaxD,MAAAA,KAAK,CAACgE,YAAN,CAAmBR,IAAnB,EAAyB;AAC1CS,QAAAA,QAAQ,EAAE,CAACZ,oBAAoB,GAAGG,IAAI,CAACxB,KAAL,CAAWiC,QAAnC,KAAgD,IAAhD,GAAuDZ,oBAAvD,GAA8EQ;AAD9C,OAAzB,CAL2B;AAQ9CN,MAAAA,WAAW;AAAE;AAAavD,MAAAA,KAAK,CAACgE,YAAN,CAAmBN,iBAAnB,EAAsC;AAC9DO,QAAAA,QAAQ,EAAE,CAACX,qBAAqB,GAAGI,iBAAiB,CAAC1B,KAAlB,CAAwBiC,QAAjD,KAA8D,IAA9D,GAAqEX,qBAArE,GAA6FO;AADzC,OAAtC,CARoB;AAW9C1C,MAAAA,UAAU,EAAEA,UAXkC;AAY9CiC,MAAAA,GAAG,EAAEA;AAZyC,KAAD,EAa5CU,KAb4C,EAarC;AACR1C,MAAAA,OAAO,EAAEA;AADD,KAbqC,CAAvB;AAAxB;AAgBD,CA7C6B,CAA9B;AA8CA8C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCnB,QAAQ,CAACoB;AACjD;AADwC,EAEtC;AACA;AACA;AACA;AACA;;AAEA;;;AAGAzB,EAAAA,OAAO,EAAE3C,SAAS,CAACqE,IATnB;;AAWA;;;;AAIAf,EAAAA,WAAW,EAAEtD,SAAS,CAACsE,IAfvB;;AAiBA;;;AAGAnD,EAAAA,OAAO,EAAEnB,SAAS,CAACuE,MApBnB;;AAsBA;;;;;;AAMAlD,EAAAA,KAAK,EAAErB;AACP;AADgB,GAEfwE,SAFM,CAEI,CAACxE,SAAS,CAACyE,KAAV,CAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,EAAoC,OAApC,EAA6C,MAA7C,EAAqD,SAArD,EAAgE,SAAhE,CAAhB,CAAD,EAA8FzE,SAAS,CAAC0E,MAAxG,CAFJ,CA5BP;;AAgCA;;;AAGAC,EAAAA,cAAc,EAAE3E,SAAS,CAACqE,IAnC1B;;AAqCA;;;AAGAzB,EAAAA,QAAQ,EAAE5C,SAAS,CAACqE,IAxCpB;;AA0CA;;;AAGAhC,EAAAA,aAAa,EAAErC,SAAS,CAACqE,IA7CzB;;AA+CA;;;;AAIAd,EAAAA,IAAI,EAAEvD,SAAS,CAACsE,IAnDhB;;AAqDA;;;AAGAM,EAAAA,EAAE,EAAE5E,SAAS,CAAC0E,MAxDd;;AA0DA;;;;;;;AAOAtD,EAAAA,aAAa,EAAEpB,SAAS,CAACqE,IAjEzB;;AAmEA;;;;AAIAZ,EAAAA,iBAAiB,EAAEzD,SAAS,CAACsE,IAvE7B;;AAyEA;;;AAGAX,EAAAA,UAAU,EAAE3D,SAAS,CAACuE,MA5EtB;;AA8EA;;;AAGAM,EAAAA,QAAQ,EAAE5E,OAjFV;;AAmFA;;;;;;AAMA6E,EAAAA,QAAQ,EAAE9E,SAAS,CAAC+E,IAzFpB;;AA2FA;;;AAGAC,EAAAA,QAAQ,EAAEhF,SAAS,CAACqE,IA9FpB;;AAgGA;;;;;AAKAT,EAAAA,IAAI,EAAE5D;AACN;AADe,GAEdwE,SAFK,CAEK,CAACxE,SAAS,CAACyE,KAAV,CAAgB,CAAC,QAAD,EAAW,OAAX,CAAhB,CAAD,EAAuCzE,SAAS,CAAC0E,MAAjD,CAFL,CArGN;;AAyGA;;;AAGAO,EAAAA,EAAE,EAAEjF,SAAS,CAACwE,SAAV,CAAoB,CAACxE,SAAS,CAACkF,OAAV,CAAkBlF,SAAS,CAACwE,SAAV,CAAoB,CAACxE,SAAS,CAAC+E,IAAX,EAAiB/E,SAAS,CAACuE,MAA3B,EAAmCvE,SAAS,CAACqE,IAA7C,CAApB,CAAlB,CAAD,EAA6FrE,SAAS,CAAC+E,IAAvG,EAA6G/E,SAAS,CAACuE,MAAvH,CAApB,CA5GJ;;AA8GA;;;;AAIAY,EAAAA,KAAK,EAAEnF,SAAS,CAACoF;AAlHjB,CAFF,GAqHI,KAAK,CArHT;AAsHA,eAAepC,QAAf","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: theme.palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: theme.palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: theme.palette.action.disabled\n  }\n}));\n\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\n\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\n\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\n\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n\n  const {\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon: iconProp = defaultIcon,\n    indeterminate = false,\n    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n    inputProps,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;"]},"metadata":{},"sourceType":"module"}