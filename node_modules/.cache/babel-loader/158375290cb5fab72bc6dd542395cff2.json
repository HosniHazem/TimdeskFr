{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\HAZEM\\\\Desktop\\\\template\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\HAZEM\\\\Desktop\\\\template\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\HAZEM\\\\Desktop\\\\template\\\\src\\\\app\\\\Session\\\\AuthGuard.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from \"react-redux\";\nimport jwtDecode from 'jwt-decode';\n\nconst AuthGuard = (_ref) => {\n  let Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  const auth = useSelector(state => state.auth);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        isAuthenticated = _useState2[0],\n        setIsAuthenticated = _useState2[1];\n\n  useEffect(() => {\n    let token = sessionStorage.getItem('token');\n\n    if (token) {\n      let tokenExpiration = jwtDecode(token).exp;\n      let dateNow = new Date();\n\n      if (tokenExpiration < dateNow.getTime() / 1000) {\n        setIsAuthenticated(false);\n      } else {\n        setIsAuthenticated(true);\n      }\n    } else {\n      setIsAuthenticated(false);\n    } // eslint-disable-next-line\n\n  }, [auth]);\n\n  if (isAuthenticated === null) {\n    return React.createElement(React.Fragment, null);\n  }\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => !isAuthenticated ? React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }) : React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nexport default AuthGuard;","map":{"version":3,"sources":["C:/Users/HAZEM/Desktop/template/src/app/Session/AuthGuard.js"],"names":["React","useEffect","useState","Route","Redirect","useSelector","jwtDecode","AuthGuard","Component","component","rest","auth","state","isAuthenticated","setIsAuthenticated","token","sessionStorage","getItem","tokenExpiration","exp","dateNow","Date","getTime","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAS,GAAG,UAAuC;AAAA,MAAzBC,SAAyB,QAApCC,SAAoC;AAAA,MAAXC,IAAW;;AACvD,QAAMC,IAAI,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;;AADuD,oBAETT,QAAQ,CAAC,IAAD,CAFC;AAAA;AAAA,QAEhDW,eAFgD;AAAA,QAE/BC,kBAF+B;;AAGvDb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAZ;;AACI,QAAGF,KAAH,EAAS;AACL,UAAIG,eAAe,GAAGZ,SAAS,CAACS,KAAD,CAAT,CAAiBI,GAAvC;AACA,UAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;;AAEA,UAAGH,eAAe,GAAGE,OAAO,CAACE,OAAR,KAAkB,IAAvC,EAA4C;AACxCR,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,OAFD,MAEK;AACDA,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,KATD,MASO;AACJA,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACF,KAbS,CAcd;;AACD,GAfQ,EAeN,CAACH,IAAD,CAfM,CAAT;;AAiBA,MAAGE,eAAe,KAAK,IAAvB,EAA4B;AAC1B,WAAO,yCAAP;AACD;;AAED,SACE,oBAAC,KAAD,oBAAWH,IAAX;AAAiB,IAAA,MAAM,EAAEa,KAAK,IAC5B,CAACV,eAAD,GACE,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAGE,oBAAC,SAAD,oBAAeU,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAUD,CAlCD;;AAoCA,eAAehB,SAAf","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useSelector } from \"react-redux\";\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst AuthGuard = ({ component: Component, ...rest }) => {\r\n  const auth = useSelector(state => state.auth)\r\n  const [isAuthenticated, setIsAuthenticated] = useState(null)  \r\n  useEffect(() => {\r\n    let token = sessionStorage.getItem('token')\r\n        if(token){\r\n            let tokenExpiration = jwtDecode(token).exp;\r\n            let dateNow = new Date();\r\n\r\n            if(tokenExpiration < dateNow.getTime()/1000){\r\n                setIsAuthenticated(false)\r\n            }else{\r\n                setIsAuthenticated(true)\r\n            }\r\n        } else {\r\n           setIsAuthenticated(false)\r\n        }\r\n    // eslint-disable-next-line\r\n  }, [auth])\r\n\r\n  if(isAuthenticated === null){\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <Route {...rest} render={props =>\r\n      !isAuthenticated ? (\r\n        <Redirect to='/login'/>\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthGuard;"]},"metadata":{},"sourceType":"module"}